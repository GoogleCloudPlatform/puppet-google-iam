# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by puppet-codegen and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'base64'
require 'google/hash_utils'
require 'google/iam/network/delete'
require 'google/iam/network/get'
require 'google/iam/network/post'
require 'google/iam/network/put'
require 'google/iam/property/boolean'
require 'google/iam/property/enum'
require 'google/iam/property/serviceaccount_name'
require 'google/iam/property/string'
require 'google/iam/property/time'
require 'puppet'

Puppet::Type.type(:giam_service_account_key).provide(:google) do
  mk_resource_methods

  def self.instances
    debug('instances')
    raise [
      '"puppet resource" is not supported at the moment:',
      'TODO(nelsonjr): https://goto.google.com/graphite-bugs-view?id=167'
    ].join(' ')
  end

  def self.prefetch(resources)
    debug('prefetch')
    resources.each do |name, resource|
      debug("prefetch #{name}")
      resource.extend(ServiceAccountKeyHelper)
      fail_if_mismatch = resource.parameter(:fail_if_mismatch)&.value || false
      (key_file_exists, key_id) = get_key_id(resource)
      unless key_id.nil?
        # If key_id, check keys existence.
        req = Google::Iam::Network::Get.new(
          self_link(service_account: resource[:service_account],
                    project: resource[:project], key_id: key_id),
          fetch_auth(resource)
        )
        @fetched = return_if_object req.send
        unless @fetched.nil?
          @fetched.merge!('name' => name, 'keyId' => key_id,
                          # TODO(nelsonjr): Add support to PKCS12 key files
                          'privateKeyType' => 'TYPE_GOOGLE_CREDENTIALS_FILE')
          resource.provider = present(name, @fetched)
        end
      end
      resource.init(key_file_exists, fail_if_mismatch)
    end
  end

  def self.present(name, fetch)
    result = new({ title: name, ensure: :present }.merge(fetch_to_hash(fetch)))
    result
  end

  def self.fetch_to_hash(fetch)
    {
      name: Google::Iam::Property::String.api_munge(fetch['name']),
      private_key_type:
        Google::Iam::Property::Enum.api_munge(fetch['privateKeyType']),
      key_algorithm:
        Google::Iam::Property::Enum.api_munge(fetch['keyAlgorithm']),
      private_key_data:
        Google::Iam::Property::String.api_munge(fetch['privateKeyData']),
      public_key_data:
        Google::Iam::Property::String.api_munge(fetch['publicKeyData']),
      valid_after_time:
        Google::Iam::Property::Time.api_munge(fetch['validAfterTime']),
      valid_before_time:
        Google::Iam::Property::Time.api_munge(fetch['validBeforeTime'])
    }.reject { |_, v| v.nil? }
  end

  def exists?
    debug("exists? #{@property_hash[:ensure] == :present}")
    @property_hash[:ensure] == :present
  end

  def create
    debug('create')
    @created = true
    if resource.fail_if_mismatch && resource.has_key_file
      raise 'Cannot overwrite file as demanded by fail_if_mismatch => true'
    end

    @created = true
    create_req = Google::Iam::Network::Post.new(collection(@resource),
                                                fetch_auth(@resource),
                                                'application/json',
                                                resource_to_request)
    @fetched = return_if_object create_req.send
    if @fetched['privateKeyData'] && @resource[:path]
      # Write to file if a file name is provided.
      json = Base64.decode64(@fetched['privateKeyData'])
      File.open(@resource[:path], 'w') { |file| file.write(json) }
    end
    @property_hash[:ensure] = :present
  end

  def destroy
    debug('destroy')
    @deleted = true
    (_, key_id) = get_key_id(resource)
    delete_req = Google::Iam::Network::Delete.new(
      self_link(service_account: @resource[:service_account],
                project: @resource[:project], key_id: key_id),
      fetch_auth(@resource)
    )
    return_if_object delete_req.send
    @property_hash[:ensure] = :absent
  end

  def flush
    debug('flush')
    # return on !@dirty is for aiding testing (puppet already guarantees that)
    return if @created || @deleted || !@dirty
    # As there's a mismatch, let's recreate the key
    create
  end

  def dirty(field, from, to)
    @dirty = {} if @dirty.nil?
    @dirty[field] = {
      from: from,
      to: to
    }
  end

  private

  # Hashes have :true or :false which to_json converts to strings
  def sym_to_bool(value)
    if value == :true
      true
    elsif value == :false
      false
    else
      value
    end
  end

  def self.resource_to_hash(resource)
    {
      project: resource[:project],
      name: resource[:name],
      private_key_type: resource[:private_key_type],
      key_algorithm: resource[:key_algorithm],
      private_key_data: resource[:private_key_data],
      public_key_data: resource[:public_key_data],
      valid_after_time: resource[:valid_after_time],
      valid_before_time: resource[:valid_before_time],
      service_account: resource[:service_account],
      path: resource[:path],
      key_id: resource[:key_id],
      fail_if_mismatch: resource[:fail_if_mismatch]
    }.reject { |_, v| v.nil? }
  end

  def resource_to_request
    request = {
      privateKeyType: @resource[:private_key_type],
      keyAlgorithm: @resource[:key_algorithm]
    }.reject { |_, v| v.nil? }

    # Convert boolean symbols into JSON compatible value.
    request = request.inject({}) { |h, (k, v)| h.merge(k => sym_to_bool(v)) }

    debug "request: #{request}" unless ENV['PUPPET_HTTP_DEBUG'].nil?
    request.to_json
  end

  def fetch_auth(resource)
    self.class.fetch_auth(resource)
  end

  def self.fetch_auth(resource)
    Puppet::Type.type(:gauth_credential).fetch(resource)
  end

  def debug(message)
    puts("DEBUG: #{message}") if ENV['PUPPET_HTTP_VERBOSE']
    super(message)
  end

  def self.collection(data)
    URI.join(
      'https://iam.googleapis.com/v1/',
      expand_variables(
        'projects/{{project}}/serviceAccounts/{{service_account}}/keys',
        data
      )
    )
  end

  def collection(data)
    self.class.collection(data)
  end

  def self.self_link(data)
    URI.join(
      'https://iam.googleapis.com/v1/',
      expand_variables(
        ['projects/{{project}}/serviceAccounts/{{service_account}}',
         'keys/{{key_id}}'].join('/'),
        data
      )
    )
  end

  def self_link(data)
    self.class.self_link(data)
  end

  def self.return_if_object(response)
    raise "Bad response: #{response.body}" \
      if response.is_a?(Net::HTTPBadRequest)
    raise "Bad response: #{response}" \
      unless response.is_a?(Net::HTTPResponse)
    return if response.is_a?(Net::HTTPNotFound)
    return if response.is_a?(Net::HTTPNoContent)
    result = decode_response(response)
    raise_if_errors result, %w[error errors], 'message'
    raise "Bad response: #{response}" unless response.is_a?(Net::HTTPOK)
    result
  end

  def return_if_object(response)
    self.class.return_if_object(response)
  end

  def self.extract_variables(template)
    template.scan(/{{[^}]*}}/).map { |v| v.gsub(/{{([^}]*)}}/, '\1') }
            .map(&:to_sym)
  end

  def self.expand_variables(template, var_data, extra_data = {})
    data = if var_data.class <= Hash
             var_data.merge(extra_data)
           else
             resource_to_hash(var_data).merge(extra_data)
           end
    extract_variables(template).each do |v|
      unless data.key?(v)
        raise "Missing variable :#{v} in #{data} on #{caller.join("\n")}}"
      end
      template.gsub!(/{{#{v}}}/, CGI.escape(data[v].to_s))
    end
    template
  end

  # A module to hold instance information about the service account key file,
  # used during creation/update of the key between GCP <=> key file.
  module ServiceAccountKeyHelper
    attr_reader :has_key_file
    attr_reader :fail_if_mismatch

    def init(has_key_file, fail_if_mismatch)
      @has_key_file = has_key_file
      @fail_if_mismatch = fail_if_mismatch
    end
  end

  # Format the response to match Puppet's expectations
  def self.decode_response(response)
    response = JSON.parse(response.body)
    if response.key? 'privateKeyData'
      response.merge!(JSON.parse(Base64.decode64(response['privateKeyData'])))
    end
    response
  end

  def decode_response(response)
    self.class.decode_response(response)
  end

  def get_key_id(resource)
    self.class.get_key_id(resource)
  end

  def self.get_key_id(resource)
    key_file_exists =
      (File.exist?(resource[:path]) if resource.parameter(:path)) || false
    if key_file_exists
      # If key file exists, fetch the key ID from it.
      file = File.open(resource[:path])
      [key_file_exists, JSON.parse(file.read)['private_key_id']]
    elsif !resource.parameter(:key_id).nil?
      [key_file_exists, resource[:key_id]]
    end
  end

  def self.fetch_resource(resource, self_link)
    get_request = ::Google::Iam::Network::Get.new(
      self_link, fetch_auth(resource)
    )
    return_if_object get_request.send
  end

  def self.raise_if_errors(response, err_path, msg_field)
    errors = ::Google::HashUtils.navigate(response, err_path)
    raise_error(errors, msg_field) unless errors.nil?
  end

  def self.raise_error(errors, msg_field)
    raise IOError, ['Operation failed:',
                    errors.map { |e| e[msg_field] }.join(', ')].join(' ')
  end
end
